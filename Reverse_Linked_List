/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    // TC: O(n), SC: O(1)
    ListNode* reverseList(ListNode* head) {
        ListNode *prev = nullptr;
        ListNode *curr = head;
        while (curr != nullptr) {
            ListNode *next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }


    // TC: O(n), SC: O(n) - recursion stack
    ListNode* reverseList(ListNode* head) {
        if (head == nullptr || head->next == nullptr) 
            return head;
        ListNode* newHead = reverseList(head->next);
        head->next->next = head;
        head->next = nullptr;
        return newHead;
    }


  
    // TC: O(n), SC: O(n)
    ListNode* reverseList(ListNode* head) {
        if (head == nullptr) return nullptr;
        stack<ListNode*> st;
        ListNode* curr = head;
        while (curr != nullptr) {
            st.push(curr);
            curr = curr->next;
        }
        ListNode* newHead = st.top();
        st.pop();
        curr = newHead;
        while (!st.empty()) {
            curr->next = st.top();
            st.pop();
            curr = curr->next;
        }
        curr->next = nullptr;
        return newHead;
    }


    // TC: O(n), SC: O(n)
    ListNode* reverseList(ListNode* head) {
        if (head == nullptr) return nullptr;
        vector<int> values;
        ListNode* curr = head;
        while (curr != nullptr) {
            values.push_back(curr->val);
            curr = curr->next;
        }
        curr = head;
        for (int i = values.size() - 1; i >= 0; i--) {
            curr->val = values[i];
            curr = curr->next;
        }
        return head;
    }
};
