/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

// TC:O(2n)
// SC:O(n)
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        vector<int>data;
        ListNode* temp = head;
        while(temp){
            data.push_back(temp->val);
            temp=temp->next;
        }

        temp = head;
        while(temp){
            temp->val = data.back();
            data.pop_back();
            temp=temp->next;
        }

        return head;

    }
};

//TC:O(n)
//SC:O(n)
class Solution {
public:
    ListNode* rLL(ListNode* head){
        // base condition
        if(head==NULL || head->next==NULL) return head;

        ListNode* newHead = rLL(head->next);
        ListNode* revnext = head->next;
        revnext->next= head;
        head->next =NULL;
        return newHead;

    }
    ListNode* reverseList(ListNode* head) {
        return rLL(head);
    }
};



//TC:O(n)
//SC:O(1)
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head==NULL) return head;
        ListNode* prev = nullptr;
        ListNode* curr = head;
        while(curr){
            ListNode* temp = curr->next;
            curr->next=prev;
            prev = curr;
            curr = temp;

        }
        return prev;
    }
};
