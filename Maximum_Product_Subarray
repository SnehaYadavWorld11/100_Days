// TC:O(n^2)
// SC:O(1)
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int maxProduct = nums[0];
        for(int i=0;i<nums.size();i++){
            int product = nums[i];
            if(product>maxProduct){
                 maxProduct = product;
            }
            for(int j=i+1;j<nums.size();j++){
                product*=nums[j];
                if(product > maxProduct){
                    maxProduct = product;
                }
            }
        }
        return maxProduct;
    }
};

// TC:O(n)
// SC:O(1)
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int prefix=1,suffix=1;
        int product=INT_MIN;
        int n=nums.size();
        for(int i=0;i<nums.size();i++){
            prefix*=nums[i];
            suffix*=nums[n-i-1];
            product=max(product,prefix);
            product=max(product,suffix);
            if(prefix==0){
                prefix=1;
            }
            if(suffix==0){
                suffix=1;
            }
            
        }
        return product;
    }
};

// TC:O(n)
// SC:O(1)
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int currentProduct = nums[0];
        int maxProduct = nums[0];

        for(int i=1;i<nums.size();i++){
            if(currentProduct*nums[i] > currentProduct){
                currentProduct*=nums[i];
            }else{
                currentProduct = nums[i];
            }
            maxProduct = max(maxProduct,currentProduct);
        }
        return maxProduct;
    }
};

