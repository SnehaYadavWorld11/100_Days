// TC:O(n^2)
// SC:O(1)
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int result = INT_MIN;
        for(int i=0;i<nums.size();i++){
            int sum =0;
            for(int j=i;j<nums.size();j++){
                sum+=nums[j];
                result = max(result,sum);
            }
        }
        return result;
    }
};

//TC:O(n)
//SC:O(1)
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int sum=0;
        int maxsub=INT_MIN;
        for(int i=0;i<nums.size();i++){
            sum+=nums[i];
            if(sum>maxsub){
                maxsub=max(maxsub,sum);
            }
            if(sum<0){
                sum=0;
            }
        }
        return maxsub;
    }
};

// TC:O(n)
// SC:O(1)
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int currentSum=nums[0];
        int maxSum=nums[0];
        for(int i=1;i<nums.size();i++){
            if(currentSum+nums[i]>nums[i]){
                currentSum+=nums[i];
            }else{
                currentSum=nums[i];
            }
            maxSum=max(maxSum,currentSum);
        }
        return maxSum;
    }
};






















