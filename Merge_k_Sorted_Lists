/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        auto cmp = [](ListNode* a, ListNode* b) {
            return a->val > b->val; 
        };
        priority_queue<ListNode*, vector<ListNode*>, decltype(cmp)> pq(cmp);
        
        for (auto list : lists) {
            if (list) pq.push(list);
        }
        
        ListNode* dummy = new ListNode(-1);
        ListNode* current = dummy;

        while (!pq.empty()) {
            ListNode* node = pq.top();
            pq.pop();
            current->next = node;
            current = current->next;

            if (node->next) pq.push(node->next);
        }

        return dummy->next;
    }
};


class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode* result=new ListNode(-1);
        ListNode* ans=result;
        vector<int>res;
        for(auto it:lists){
            ListNode* temp=it;
            while(temp){
                res.push_back(temp->val);
                temp=temp->next;
            }
        }
        sort(res.begin(),res.end());
        for(int i=0;i<res.size();i++){
            ListNode* temp=new ListNode(res[i]);
            ans->next=temp;
            ans=temp;
        }
        return result->next;
    }
};

