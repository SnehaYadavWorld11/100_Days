// brute force approach 
//near ~TC = O(n^2)
//      SC = O(1)

// class Solution {
// public:
//     vector<int> twoSum(vector<int>& nums, int target) {
//         for(int i=0;i<nums.size();i++){
//             for(int j=i+1;j<nums.size();j++){
//                 if(nums[i]+nums[j]==target) return {i,j};
//             }
//         }
//         return {};
//     }

// };

// brute or optimal approach
// TC: O(n) in average case
// SC: O(n)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int>mp;
        for(int i=0;i<nums.size();i++){
            int remaining = target-nums[i];
            if(mp.find(remaining) != mp.end()){
                return {mp[remaining],i};
            }else{
                mp[nums[i]]=i;
            }
        }
        return {};
    }

};
